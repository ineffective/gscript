NOTE:
=====

This is already implemented.


1. Examples
-----------

Example 1:

def main() {
	x = 10; // when this is found, x is treated as declared
	return x; // ok, x is known
}

Example 2:

def main() {
	x = y; // x is being declared, but y is not known, error
	return x; // we won't get there, error was declared earlier.

Example 3:

def main() {
	x = 10; // ok, x is defined;
	return \(l) { // ok, l is a parameter, so it will be known in lambda.
		return l * x; // ok, x is known. but there is a problem - how can we bind it?
	}
}

2. How to bind lambdas
----------------------

When lambda node is found, new scope is pushed on the stack.
After that, if new variable is found, all scopes are scanned for it's name in order from newest to oldest. If variable is found, it is added to all newer scopes. Also a new binding is added. Bindings are in form: (slot in parent's scope ; slot in lambda's scope). Let's walk through example:

1. def main() {
2. 	x = 10;
3. 	y = \(a) {
4.		return x + a;
5.	}
6. 	return y;
7. }

On line 1:
  - add new scope. Scopes list is: scopes := { scope[] }
On line 2: 
  - since var x is undefined, treat it as variable's definition. Variable is treated as defiend and gets slot number assigned. So scopes look like this:
    scopes := { scope[ { 'x': 0 } ] }
On line 3:
  - 'y =' is treated as a variable definition.
  - since lambda is found, new scope is pushed onto the stack.
  - since 'a' is an argument, we define it and push onto the stack and assign slot number. scopes becomes:
    scopes := { scope[ { 'x': 0 }, { 'y': 1 } ], scope[ { 'a': 0 } ] }
On line 4:
  - since 'x' is found in enclosing scope, and 'a' is in current scope, only 'x' is added to current scope and new binding is added. So slots becomes:
    scopes := { scope[ { 'x': 0 }, { 'y': 1 } ], scope[ { 'a': 0 }, { 'x': 1 } ] }
    And bindings look like:
    bindigs := { binding[ ], binding[ { 1 ; 0 } ] }
On line 5:
  - since we exit lambda, we create additional nodes that perform binding. It looks like this:
    { lamObj = new LambdaObject(lambdaCode);
      bind(lamObj, 1, 0);
    }


1. def main() {
2. 	x = 1;
3. 	y = 1;
4. 	l1 = \() {
5. 		z = 1;
6. 		return \(a, b) {
7. 			return a * (x + y + z) + b * (x + y + 1);
8. 		}
9. 	}
10. 	l2 = l1();
11. 	return l2(1, 2);
12. }

@line 4:
scopes: [ [ x: 0, y: 1, l1: 2 ], [ ] ]
@line 5:
scopes: [ [ x: 0, y: 1, l1: 2 ], [ z: 0 ] : bind[] ]
@line 8, before closing bracket:
scopes: [ [ x: 0, y: 1, l1: 2 ], [ z: 0, x: 1, y: 2 ] : bind [(1, 0), (2, 1)], [ a: 0, b: 1, x: 2, y: 3, z: 4 ] : bind [(2, 1), (3, 2), (4, 0)] ]

